package com.infy.validator;

import java.time.LocalDate;

import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.builder.fluent.Configurations;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.commons.logging.LogFactory;

import com.infy.exception.InfyAcademyException;
import com.infy.model.Candidate;

public class Validator {
	
//	calls the validation methods for individual inputs
//	if any method returns false, then the String value correspondingly will be returned
	public void validate(Candidate candidate) throws InfyAcademyException, ConfigurationException {
		PropertiesConfiguration config = new Configurations().properties("configuration.properties");
		String errorStatus =  null;
		if (!isValidCandidateName(candidate.getCandidateName())) 
			errorStatus = "Validator.INVALID_CANDIDATE_NAME";
		else if (!isValidCandidateId(candidate.getCandidateId()))
			errorStatus = "Validator.INVALID_CANDIDATE_ID";
		else if (!isValidDepartment(candidate.getDepartment()))
			errorStatus = "Validator.INVALID_DEPARTMENT";
		else if (!isValidExamDate(candidate.getExamDate()))
			errorStatus = "Validator.INVALID_EXAM_DATE";
		else if (!isValidExamMarks(candidate))
			errorStatus = "Validator.INVALID_EXAM_MARKS";
		else if (!isValidResult(candidate.getResult()))
			errorStatus = "Validator.INVALID_RESULT";
		
		if (errorStatus != null) {
			InfyAcademyException e = new InfyAcademyException((String)config.getProperty(errorStatus));
			LogFactory.getLog(Validator.class).error(e.getMessage(), e);
			throw e;
		}
	}
	
// 	The entered candidate ID should be of size 5
	public Boolean isValidCandidateId(Integer candidateId) {
		return candidateId.toString().length() == 5;
	}

// 	The entered candidate name should contain only alphabets. Cannot have
// 	special characters and only spaces
	public Boolean isValidCandidateName(String candidateName) {
		return candidateName.matches("[A-Za-z]+");
	}

// 	The entered Department name should be one among the given departments
//  (ECE, CSE, IT, EEE)
	public Boolean isValidDepartment(String department) {
		return department.matches("(ECE|CSE|IT|EEE)");
	}

//  exam date cannot be today or after todays date
	public Boolean isValidExamDate(LocalDate examDate) {
		return examDate.isBefore(LocalDate.now());
	}
	
//	Checking if marks are not equal to "0"
	public Boolean isValidExamMarks(Candidate candidateTO) {
		return (candidateTO.getMark1() > 0 && candidateTO.getMark2() > 0 && candidateTO.getMark3() > 0);
	}
	
//	Checking if result set is either 'P' or 'F' only
	public Boolean isValidResult(Character result) {
		return result.toString().matches("P|F");
	}

}
